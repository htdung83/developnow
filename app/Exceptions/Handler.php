<?php

    namespace App\Exceptions;

    use Illuminate\Database\Eloquent\ModelNotFoundException;
    use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
    use Illuminate\Http\JsonResponse;
    use Illuminate\Validation\ValidationException;
    use Symfony\Component\HttpKernel\Exception\HttpException;
    use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
    use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
    use Throwable;

    class Handler extends ExceptionHandler
    {
        /**
         * A list of the exception types that are not reported.
         *
         * @var array<int, class-string<Throwable>>
         */
        protected $dontReport = [
            //
        ];

        /**
         * A list of the inputs that are never flashed for validation exceptions.
         *
         * @var array<int, string>
         */
        protected $dontFlash = [
            'current_password',
            'password',
            'password_confirmation',
        ];

        /**
         * Register the exception handling callbacks for the application.
         *
         * @return void
         */
        public function register()
        {
            $this->reportable(function (Throwable $e) {
                //
            });
        }

        public function render($request, Throwable $e)
        {
            if ($request->ajax() || $request->wantsJson()) {
                return $this->renderApiResponse($e);
            }

            return parent::render($request, $e); // TODO: Change the autogenerated stub
        }

        public function renderApiResponse(Throwable $e): JsonResponse
        {
            $code = 500;
            $message = null;
            $headers = [];
            $response = [];

            if ($e instanceof HttpException) {
                $code = $e->getStatusCode();
                $message = $e->getMessage();
                $headers = $e->getHeaders();

                if ($e instanceof NotFoundHttpException) {
                    $message = 'Page not found';
                }
            }

            if ($e instanceof ModelNotFoundException) {
                $code = 404;
                $message = 'No record found';
            }

            $response['error']['message'] = $message;

            if ($e instanceof ValidationException) {
                $response['error']['validation'] = $e->errors();
                $code = $e->status;
            }

            $response['error']['code'] = $code;

            if ($message === null)
                $response['error']['message'] = $e->getMessage();

            return response()->json($response, $code, $headers);
        }
    }
